# Cursor Rules - Link Manager Project

## Podstawowe reguÅ‚y projektowe

### 1. Zachowanie istniejÄ…cych gradientÃ³w
- **KRYTYCZNE**: Wszystkie klasy CSS gradient muszÄ… byÄ‡ zachowane
- Klasy do zachowania: `gradient-button`, `edit-gradient`, `delete-gradient`, `copy-gradient`, `share-gradient`, `user-logged-gradient`
- Przy kaÅ¼dej zmianie UI sprawdÅº, czy gradienty sÄ… zachowane w buttonach

### 2. Modernizacja state management
- UÅ¼ywaj Zustand + TanStack Query zamiast useState/useEffect
- Centralizuj error handling przez store
- Implementuj optimistic updates gdzie moÅ¼liwe
- Zachowuj wszystkie istniejÄ…ce funkcjonalnoÅ›ci

### 3. Polski jÄ™zyk w komentarzach i komunikatach
- Komentarze mogÄ… byÄ‡ po polsku
- Komunikaty bÅ‚Ä™dÃ³w i interfejs uÅ¼ytkownika po polsku
- Nazwy zmiennych i funkcji po angielsku

### 4. Testing
- Po kaÅ¼dej zmianie uruchom `npm test` aby upewniÄ‡ siÄ™, Å¼e nic siÄ™ nie zepsuÅ‚o
- Testuj funkcjonalnoÅ›Ä‡ curl na endpoints API
- JeÅ›li coÅ› nie dziaÅ‚a, szukaj rozwiÄ…zania w internecie i popraw

### 5. **DOKUMENTACJA ZADAÅƒ**
**OBOWIÄ„ZKOWE**: Po wykonaniu kaÅ¼dego task/zadania:

1. **Zaktualizuj plik implementacji**:
   - ZmieÅ„ status zadania z ğŸŸ¡ PENDING na ğŸŸ¢ COMPLETED âœ…
   - Dodaj datÄ™ zakoÅ„czenia w formacie YYYY-MM-DD
   - Opisz zrealizowane funkcjonalnoÅ›ci
   - Podaj metryki (np. redukcja complexity, liczba plikÃ³w)

2. **Aktualizuj TODO list**:
   - UÅ¼yj TodoWrite aby oznaczyÄ‡ zadanie jako completed
   - Dodaj nowe podzadania jeÅ›li potrzebne
   - Dokumentuj rezultaty i ulepszeÅ„

3. **StwÃ³rz podsumowanie**:
   - Lista zmienionych plikÃ³w
   - Kluczowe usprawnienia 
   - Zachowane funkcjonalnoÅ›ci (szczegÃ³lnie gradienty)
   - Testy ktÃ³re przeszÅ‚y

4. **PrzykÅ‚ad aktualizacji dokumentacji**:
```markdown
### **Task X.Y: Nazwa Zadania**
**Status**: ğŸŸ¢ COMPLETED âœ…  
**ZakoÅ„czono**: 2025-08-07
**Czas realizacji**: X godzin

#### Zrealizowane:
- âœ… FunkcjonalnoÅ›Ä‡ A
- âœ… FunkcjonalnoÅ›Ä‡ B
- âœ… Zachowano wszystkie gradienty
- âœ… Testy przechodzÄ… (X/X)

#### Pliki zmienione:
- `path/to/file1.ts` - opis zmian
- `path/to/file2.tsx` - opis zmian

#### Metryki:
- Redukcja complexity: X%
- useState hooks: X â†’ Y
- Nowe capabilities: lista
```

### 6. Build i deployment
- Przed commitem zawsze uruchom `npm run build`
- SprawdÅº czy nie ma bÅ‚Ä™dÃ³w TypeScript
- Upewnij siÄ™, Å¼e wszystkie importy dziaÅ‚ajÄ…

### 7. Git workflow
- Nie commituj automatycznie bez pozwolenia
- UÅ¼ywaj opisowych commit messages
- Backup plikÃ³w przed wiÄ™kszymi zmianami

### 8. Performance
- UÅ¼ywaj lazy loading (dynamic imports) dla duÅ¼ych komponentÃ³w
- Implementuj proper error boundaries
- Zoptymalizuj re-renders przez Zustand selectors

### 9. BezpieczeÅ„stwo
- Nie loguj haseÅ‚ ani secrets
- UÅ¼ywaj bcrypt do hashowania haseÅ‚
- Waliduj input na frontend i backend

### 10. SuperClaude Framework Integration
- UÅ¼ywaj SuperClaude commands gdy dostÄ™pne (/analyze, /implement, /build)
- Wykorzystuj Task tool dla complex operations
- Dokumentuj wszystko w TodoWrite dla trackingu

## Architektura projektu

### Tech Stack
- Next.js 15 (App Router)
- TypeScript
- MySQL + Drizzle ORM
- NextAuth.js
- Zustand + TanStack Query (nowy)
- Tailwind CSS
- Vitest (testing)

### Kluczowe foldery
- `app/` - Next.js App Router pages
- `lib/` - Utilities, stores, queries
- `components/` - Reusable components  
- `__tests__/` - Test files
- `scripts/` - Database and build scripts

**PAMIÄ˜TAJ**: KaÅ¼de wykonane zadanie = aktualizacja dokumentacji!